

class Solution
{
    Node* reverse(Node* head){
        Node* prev = NULL;
        Node* curr = head;
        Node* temp = NULL;
        while(curr!=NULL){
            temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    
    public:

    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        Node* fst = reverse(first);
        Node* scnd = reverse(second);
        
        Node* head = new Node(-1);
        Node* temp = head;
        
        int rem = 0, sum = 0, carry = 0;
        while(fst!=NULL && scnd!=NULL){
             sum = fst->data + scnd->data + carry;
             carry = sum/10;
             rem = sum%10;
            // temp->data = rem;
             temp->next = new Node(rem);
             temp = temp->next;
             fst = fst->next;
             scnd = scnd->next;
        }
        while(fst != NULL){
            sum = fst->data + carry;
             rem = sum%10;
            carry = sum/10;
            temp->next = new Node(rem);
            temp = temp->next;
            fst = fst->next;
        }
        while(scnd != NULL){
           sum = scnd->data + carry;
             rem = sum%10;
            carry = sum/10;
            temp->next = new Node(rem);
            temp = temp->next;
            scnd = scnd->next;
        }
       if(carry != 0){
           temp->next = new Node(carry);
       }
        Node* result = reverse(head->next);
        return result;
        // code here
    }
};